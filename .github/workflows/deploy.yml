name: Docker CI

on:
  push:
    branches:
      - main
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/go-simple-blog:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            # Update package list
            sudo apt-get update

            # Install Docker if not installed
            if ! command -v docker &> /dev/null; then
              sudo apt-get install -y ca-certificates curl gnupg
              sudo install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              sudo chmod a+r /etc/apt/keyrings/docker.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
            fi

            # Install Docker Compose v2 if not installed
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            # Create directory if it doesn't exist
            mkdir -p /home/ubuntu/go-simple-blog
            
            # Copy docker-compose.yml to the server
            cat > /home/ubuntu/go-simple-blog/docker-compose.yml << 'EOL'
            version: '3.8'
            services:
              app:
                image: ${{ secrets.DOCKER_HUB_USERNAME }}/go-simple-blog:latest
                ports:
                  - "8080:8080"
                environment:
                  - DB_HOST=db
                  - DB_PORT=5432
                  - DB_USER=postgres
                  - DB_PASS=postgres
                  - DB_NAME=go_simple_blog
                  - PORT=8080
                depends_on:
                  - db
                networks:
                  - blog-network

              db:
                image: postgres:15-alpine
                environment:
                  - POSTGRES_USER=postgres
                  - POSTGRES_PASSWORD=postgres
                  - POSTGRES_DB=go_simple_blog
                ports:
                  - "5432:5432"
                volumes:
                  - postgres_data:/var/lib/postgresql/data
                networks:
                  - blog-network

            networks:
              blog-network:
                driver: bridge

            volumes:
              postgres_data:
            EOL

            # Navigate to the application directory
            cd /home/ubuntu/go-simple-blog
            
            # Make sure we have the latest images
            sudo docker-compose pull
            
            # Stop and remove existing containers
            sudo docker-compose down
            
            # Start the containers in detached mode
            sudo docker-compose up -d
            
            # Wait for containers to be up
            echo "Waiting for containers to start..."
            sleep 10
            
            # Check container status
            sudo docker-compose ps 